setwd("C:/Users/Lianz/Desktop/Series de Tiempo/Práctica Clase 2-20211015")
source(paste0(path,"Funciones.R"))
source("Funciones.R")
suppressPackageStartupMessages({
library(tseries)
library(forecast)
library(ggplot2)
library(gridExtra)
})
# Simular un WN
white_noise <- arima.sim(model = list(order = c(0, 0, 0)),
n = 100)
# Graficar white_noise
autoplot(white_noise) +
ggtitle("Ruido Blanco", subtitle = "Con Media") +
ylab("")
# RANDOM WALK
rw <- arima.sim(model = list(order = c(0, 1, 0)),
n = 100)
# Graficar rw_drift
autoplot(rw,
main = "Random Walk",
ylab = "")
g1 = ggAcf(white_noise) + ggtitle("Ruido Blanco")
g2 = ggAcf(rw) + ggtitle("Random Walk")
grid.arrange(g1,g2,ncol = 2)
grid.arrange(g1,g2,ncol = 2)
library(tseries)
Box.test(white_noise,lag = 1,type = "Box-Pierce")
Box.test(white_noise,lag = 1,type = "Ljung-Box")
Box.test(white_noise,lag = 2,type = "Ljung-Box")
Box.test(white_noise,lag = 3,type = "Ljung-Box")
Box.test(rw,lag = 1,type = "Ljung-Box")
Box.test(rw,lag = 2,type = "Ljung-Box")
Incorrelation(white_noise,"Ljung-Box")
################################
####### SETEO DE CARPETA #######
################################
rm(list = ls())
source("Funciones.R")
suppressPackageStartupMessages({
library(tseries)
library(forecast)
library(ggplot2)
library(gridExtra)
})
# Simular un WN
white_noise <- arima.sim(model = list(order = c(0, 0, 0)),
n = 100)
# Graficar white_noise
autoplot(white_noise) +
ggtitle("Ruido Blanco", subtitle = "Con Media") +
ylab("")
# RANDOM WALK
rw <- arima.sim(model = list(order = c(0, 1, 0)),
n = 100)
# Graficar rw_drift
autoplot(rw,
main = "Random Walk",
ylab = "")
g1 = ggAcf(white_noise) + ggtitle("Ruido Blanco")
g2 = ggAcf(rw) + ggtitle("Random Walk")
grid.arrange(g1,g2,ncol = 2)
library(tseries)
Box.test(white_noise,lag = 1,type = "Box-Pierce")
Box.test(white_noise,lag = 1,type = "Ljung-Box")
Box.test(white_noise,lag = 2,type = "Box-Pierce")
Box.test(white_noise,lag = 2,type = "Ljung-Box")
Box.test(white_noise,lag = 1,type = "Box-Pierce")
Box.test(white_noise,lag = 1,type = "Ljung-Box")
Box.test(white_noise,lag = 2,type = "Ljung-Box")
Box.test(white_noise,lag = 3,type = "Ljung-Box")
# Simular un WN
white_noise <- arima.sim(model = list(order = c(0, 0, 0)),
n = 100)
# Graficar white_noise
autoplot(white_noise) +
ggtitle("Ruido Blanco", subtitle = "Con Media") +
ylab("")
# RANDOM WALK
rw <- arima.sim(model = list(order = c(0, 1, 0)),
n = 100)
# Graficar rw_drift
autoplot(rw,
main = "Random Walk",
ylab = "")
g1 = ggAcf(white_noise) + ggtitle("Ruido Blanco")
g2 = ggAcf(rw) + ggtitle("Random Walk")
grid.arrange(g1,g2,ncol = 2)
library(tseries)
Box.test(white_noise,lag = 1,type = "Box-Pierce")
Box.test(white_noise,lag = 1,type = "Ljung-Box")
Box.test(white_noise,lag = 2,type = "Ljung-Box")
Box.test(white_noise,lag = 3,type = "Ljung-Box")
Box.test(rw,lag = 1,type = "Ljung-Box")
Box.test(rw,lag = 2,type = "Ljung-Box")
Incorrelation(white_noise,"Ljung-Box")
Incorrelation(rw,"Ljung-Box")
inco_wn = Incorrelation(white_noise,"Ljung-Box")
autoplot(ts(inco_wn$P_Value)) +
ggtitle("Test de Ljung-Box", subtitle = "P-Value") +
ylab("")
inco_wn = Incorrelation(rw,"Ljung-Box")
autoplot(ts(inco_wn$P_Value)) +
ggtitle("Test de Ljung-Box", subtitle = "P-Value") +
ylab("")
inco_wn = Incorrelation(white_noise,"Ljung-Box")
autoplot(ts(inco_wn$P_Value)) +
ggtitle("Test de Ljung-Box", subtitle = "P-Value") +
ylab("")
set.seed(123)
phi1 = 0.80
ar_1 <- arima.sim(n = 1000,
model = list(ar = phi1,ma = NULL),
sd = 1)
autoplot(ar_1) +
ggtitle("AR(1) Simulado") +
labs(subtitle = bquote(phi == .(phi1))) +
ylab("")
acf(ar_1,type = "covariance",plot = F)
acf(ar_1,type = "covariance",plot = T)
acf(ar_1,type = "correlation",plot = T)
phi1 = 0.99
ar_1 <- arima.sim(n = 1000,
model = list(ar = phi1,ma = NULL),
sd = 1)
autoplot(ar_1) +
ggtitle("AR(1) Simulado") +
labs(subtitle = bquote(phi == .(phi1))) +
ylab("")
phi1 = 0.01
ar_1 <- arima.sim(n = 1000,
model = list(ar = phi1,ma = NULL),
sd = 1)
autoplot(ar_1) +
ggtitle("AR(1) Simulado") +
labs(subtitle = bquote(phi == .(phi1))) +
ylab("")
acf(ar_1,type = "covariance",plot = T)
## Incorrelación
Box.test(ar_1,lag = 1,type = "Ljung-Box")
Box.test(ar_1,lag = 2,type = "Ljung-Box")
phi1 = 0.80
ar_1 <- arima.sim(n = 1000,
model = list(ar = phi1,ma = NULL),
sd = 1)
autoplot(ar_1) +
ggtitle("AR(1) Simulado") +
labs(subtitle = bquote(phi == .(phi1))) +
ylab("")
acf(ar_1,type = "covariance",plot = T)
acf(ar_1,type = "correlation",plot = T)
## Incorrelación
Box.test(ar_1,lag = 1,type = "Ljung-Box")
Box.test(ar_1,lag = 2,type = "Ljung-Box")
acf(ar_1,type = "covariance",plot = F)
acf(ar_1,type = "correlation",plot = F)
## Incorrelación
Box.test(ar_1,lag = 1,type = "Ljung-Box")
Box.test(ar_1,lag = 2,type = "Ljung-Box")
## Incorrelación
Box.test(ar_1,lag = 1,type = "Ljung-Box")
Box.test(ar_1,lag = 2,type = "Ljung-Box")
h1 = ggAcf(white_noise_2,type = "partial") + ggtitle("Ruido Blanco")
h1 = ggAcf(white_noise_,type = "partial") + ggtitle("Ruido Blanco")
h2 = ggAcf(rw,type = "partial") + ggtitle("Random Walk")
h3 = ggAcf(ar_1,type = "partial") + ggtitle("AR(1)") + labs(subtitle = bquote(phi == .(phi1)))
grid.arrange(h1,h2,h3, ncol = 2)
h1 = ggAcf(white_noise_,type = "partial") + ggtitle("Ruido Blanco")
h2 = ggAcf(rw,type = "partial") + ggtitle("Random Walk")
h1 = ggAcf(white_noise,type = "partial") + ggtitle("Ruido Blanco")
h2 = ggAcf(rw,type = "partial") + ggtitle("Random Walk")
h3 = ggAcf(ar_1,type = "partial") + ggtitle("AR(1)") + labs(subtitle = bquote(phi == .(phi1)))
grid.arrange(h1,h2,h3, ncol = 2)
modelo <- arma(ar_1,order = c(1,0), include.intercept = T)
coef(modelo)
summary(modelo)
modelo <- arma(ar_1,order = c(1,0), include.intercept = F)
modelo <- arma(ar_1,order = c(1,0), include.intercept = T)
coef(modelo)
summary(modelo)
residuos <- resid(modelo)
library(lessR)
Histogram(residuos,density = T)
# Grafico los residuos
plot(residuos, main="Ploteo los residuos del modelo AR(1)", xlab="Tiempo", ylab="Valores",col="6")
# Grafico un histograma de los residuos
Histogram(residuos,density = T)
library(tseries)
jarque.bera.test(na.omit(residuos))
Normality_Test(na.omit(residuos),type = "JB")
Normality_Test(na.omit(residuos),type = "AD")
Normality_Test(na.omit(residuos),type = "SW")
Box.test(residuos,lag = 1)
Incorrelation(residuos,"Ljung-Box")
modelo2 <- arima(ar_1,order = c(1,0,0),method = "ML")
summary(modelo2)
modelo3 <- arima(ar_1,order = c(1,0,0),method = "CSS")
summary(modelo3)
summary(modelo)
modelo4 <- ar(ar_1, method = "yule-walker")
print(modelo4)
summary(modelo4)
modelo4$method
rm(list = ls())
arima?
as.data.frame()
?arima
suppressPackageStartupMessages({
library(tseries)
library(forecast)
library(astsa)
library(PerformanceAnalytics)
library(quantmod)
library(Quandl)
library(ggplot2)
library(gridExtra)
library(dygraphs)
library(PASWR2)
library(pastecs)
library(psych)
library(lessR)
library(readxl)
})
install.packages("PerformanceAnalytics")
suppressPackageStartupMessages({
library(tseries)
library(forecast)
library(astsa)
library(PerformanceAnalytics)
library(quantmod)
library(Quandl)
library(ggplot2)
library(gridExtra)
library(dygraphs)
library(PASWR2)
library(pastecs)
library(psych)
library(lessR)
library(readxl)
})
COVID <- read.csv("casos_covid19.csv")
head(COVID)
class(COVID)
# Configurar la/s variables de inter?s como serie/s de tiempo"
inds <- seq(as.Date("2020-03-02"), as.Date("2021-06-15"), by = "day")
COVID_TS <- ts(COVID$nuevos_casos_caba,     # random data
start = c(2020, as.numeric(format(inds[1], "%j"))),
frequency = 365)
# confirmo que sea serie de tiempo
class(COVID_TS)
#grafico 1
autoplot(COVID_TS) +
ggtitle("COVID-19 en CABA") +
ylab("casos nuevos por dia") +
xlab("tiempo")
#grafico 2
plot(COVID_TS, col = "red", main = "Evolucion COVID-19 en CABA", ylab = "casos nuevos diarios", xlab ="Tiempo", lwd=2, type="l", pch=10)
#grafico 1
autoplot(COVID_TS) +
ggtitle("COVID-19 en CABA") +
ylab("casos nuevos por dia") +
xlab("tiempo")
#grafico 2
plot(COVID_TS, col = "red", main = "Evolucion COVID-19 en CABA", ylab = "casos nuevos diarios", xlab ="Tiempo", lwd=2, type="l", pch=10)
# GRAFICOS DE ACF
acf(COVID_TS, lag.max =20, plot =F)
acf(COVID_TS, lag.max =20, plot =T)
ggAcf(COVID_TS)
u1 = autoplot(COVID_TS) + ggtitle("Casos confirmados Covid-19", subtitle = "") + ylab("")
u2 = ggAcf(COVID_TS) + ggtitle("Casos confirmados Covid-19", subtitle = "FAC")
grid.arrange(u1,u2)
# Analizamos 50 Lag's
ggAcf(COVID_TS,lag.max = 50)
#
plot(COVID_TS)
abline(reg=lm(COVID_TS~time(COVID_TS)))
# Atencion = este grafico no tiene sentido con este dataset!, solo es para mostrar que = por mas simple que sea el analisis siempre hay que adaptarlo a nuestro dataset
boxplot(COVID_TS~cycle(COVID_TS))
# transformacion DIF de la serie
dif_COVID_TS=diff(COVID_TS)
# transformacion logaritmica de la serie
log_COVID_TS=log(COVID_TS)
# transformacion diferenciada de la serie con transformacion logaritmica
log_dif_COVID_TS=diff(log_COVID_TS)
# ploteo de COVID solo diff
plot(dif_COVID_TS)
abline(reg=lm(dif_COVID_TS~time(dif_COVID_TS)))
# ploteo de COVID solo log
plot(log_COVID_TS)
abline(reg=lm(log_COVID_TS~time(log_COVID_TS)))
# ploteo de COVID con log y dif
plot(log_dif_COVID_TS)
abline(reg=lm(log_dif_COVID_TS~time(log_dif_COVID_TS)))
IPC <- read.csv("Indice_precios.csv")
head(IPC)
class(IPC)
IPC_TS = ts(IPC$IPC,
frequency = 12,
start = c(2017,01))
# vemos que el Data ahora es time series
class(IPC_TS)
# COMPONENTES DE LA SERIE DE TIEMPO
#descomposicion general
plot(decompose(IPC_TS))
cycle(COVID_TS)
# COMPONENTES DE LA SERIE DE TIEMPO
#descomposicion general
plot(decompose(IPC_TS))
# COMPONENTES DE LA SERIE DE TIEMPO
#descomposicion general
plot(decompose(IPC_TS))
decompose(IPC_TS)
#
plot(aggregate(IPC_TS,FUN = mean))
#
boxplot(IPC_TS~cycle(IPC_TS))
#
plot(IPC_TS)
abline(reg=lm(IPC_TS~time(IPC_TS)))
# transformacion DIF de la serie
dif_IPC_TS=diff(IPC_TS)
# transformacion logaritmica de la serie
log_IPC_TS=log(IPC_TS)
# transformacion diferenciada de la serie con transformacion logaritmica
log_dif_IPC_TS=diff(log_IPC_TS)
# ploteo de IPC solo diff
plot(dif_IPC_TS)
abline(reg=lm(dif_IPC_TS~time(dif_IPC_TS)))
# ploteo de IPC solo log
plot(log_IPC_TS)
abline(reg=lm(log_IPC_TS~time(log_IPC_TS)))
# ploteo de IPC con log y dif
plot(log_dif_IPC_TS)
abline(reg=lm(log_dif_IPC_TS~time(log_dif_IPC_TS)))
library(ggfortify)
library(tseries)
library(forecast)
data(AirPassengers)
AP <- AirPassengers
# analizamos la clase
class(AP)
AP
# Veo si hay missing
sum(is.na(AP))
# Veo la frecuencia de la serie de tiempo
frequency(AP)
# Veo los ciclos de la serie
cycle(AP)
# Breve resumen de los datos
summary(AP)
# Graficos de los datos
plot(AP,xlab="Dias", ylab = "Numeros de pasajeros en miles",main="Numeros de pasajeros entre 1949 y 1961")
autoplot(AP) + labs(x ="Dias", y = "Numeros de pasajeros en miles", title="Numeros de pasajeros entre 1949 y 1961")
library(ggfortify)
library(tseries)
library(forecast)
data(AirPassengers)
AP <- AirPassengers
# analizamos la clase
class(AP)
AP
# Veo si hay missing
sum(is.na(AP))
# Veo la frecuencia de la serie de tiempo
frequency(AP)
# Veo los ciclos de la serie
cycle(AP)
# Breve resumen de los datos
summary(AP)
# Graficos de los datos
plot(AP,xlab="Dias", ylab = "Numeros de pasajeros en miles",main="Numeros de pasajeros entre 1949 y 1961")
autoplot(AP) + labs(x ="Dias", y = "Numeros de pasajeros en miles", title="Numeros de pasajeros entre 1949 y 1961")
boxplot(AP~cycle(AP),xlab="Dias", ylab = "Numeros de pasajeros en miles" ,main ="Boxplot mensual de Numeros de pasajeros entre 1949 y 1961")
# estimacion de tendencia
library(plotly)
library(dplyr)
library(TSstudio)
library(lubridate)
# Veo los ciclos de la serie
cycle(AP)
ap_smooth <- ts_ma(AirPassengers, n = 6,
separate = FALSE)
ap_smooth$plot %>%
layout(legend = list(x = 0.1, y = 0.9))
# quitar tendencia a la serie
df <- ts_to_prophet(AirPassengers) %>%
select(date = ds, y) %>%
left_join(ts_to_prophet(ap_smooth$ma_6) %>%
select(date = ds, trend = y), by = "date")
head(df, 8)
# quitamos la tendencia
df$detrend <- df$y - df$trend
head(df, 8)
ts_plot(df,
title = "AirPassenger quitamos tendencia") %>%
layout(legend = list(x = 0.1, y = 0.9))
df$year <- year(df$date)
df$month <- month(df$date)
p <- plot_ly()
for(i in unique(df$year)){
temp <- NULL
temp <- df %>% filter(year == i)
p <- p %>% add_lines(x = temp$month,
y = temp$detrend,
name = i)
}
# imprimo grafico
p
# grafico con tendencia estacional
seasonal_comp <- df %>%
group_by(month) %>%
summarise(month_avg = mean(detrend, na.rm = TRUE),
.groups = "drop")
p %>% add_lines(x = seasonal_comp$month,
y = seasonal_comp$month_avg,
line = list(color = "black", dash = "dash", width = 4),
name = "Seasonal Component")
df <- df %>% left_join(seasonal_comp, by = "month")
df$irregular <- df$y - df$trend - df$month_avg
head(df)
ts_plot(df[, c("date", "y" ,"trend", "detrend", "month_avg", "irregular")],
title = "AirPassenger and its Components",
type = "multiple")
# REsumen de la serie con descomposicion aditiva y multiplicativa mediante otra funcion
ts_decompose(AirPassengers, type = "both")
